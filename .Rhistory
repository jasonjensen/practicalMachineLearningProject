resData$predicted <- resData$predicted + (resData[,i-1] * regression$reg$coefficient[[i-1]])
i <- i + 1
}
resData$residuals = resData$predicted + resData[,1]
plot(resData[,3], resData$residuals)
#return(resData)
}
getResiduals(data, c("cowcode", "year"), t)
getResiduals <- function(data, idvars, regression) {
resData <- regression$reg$model
nvars <- dim(resData)[2] + 1
resData$predicted <- regression$reg$coefficient[[1]]
i <- 3
while (i < nvars) {
resData$predicted <- resData$predicted + (resData[,i-1] * regression$reg$coefficient[[i-1]])
i <- i + 1
}
resData$residuals = resData$predicted - resData[,1]
plot(resData[,3], resData$residuals)
#return(resData)
}
getResiduals(data, c("cowcode", "year"), t)
getResiduals <- function(data, idvars, regression) {
resData <- regression$reg$model
nvars <- dim(resData)[2] + 1
resData$predicted <- regression$reg$coefficient[[1]]
i <- 3
while (i < nvars) {
resData$predicted <- resData$predicted + (resData[,i-1] * regression$reg$coefficient[[i-1]])
i <- i + 1
}
resData$residuals = resData$predicted - resData[,1]
plot(resData[,1], resData$predicted)
#return(resData)
}
getResiduals(data, c("cowcode", "year"), t)
getResiduals <- function(data, idvars, regression) {
resData <- regression$reg$model
nvars <- dim(resData)[2]
resData$predicted <- regression$reg$coefficient[[1]]
i <- 3
while (i < nvars) {
resData$predicted <- resData$predicted + (resData[,i-1] * regression$reg$coefficient[[i-1]])
i <- i + 1
}
resData$residuals = resData$predicted - resData[,1]
plot(resData[,1], resData$predicted)
#return(resData)
}
getResiduals(data, c("cowcode", "year"), t)
getResiduals <- function(data, idvars, regression) {
resData <- regression$reg$model
nvars <- dim(resData)[2] + 1
resData$predicted <- regression$reg$coefficient[[1]]
i <- 2
while (i < nvars) {
resData$predicted <- resData$predicted + (resData[,i-1] * regression$reg$coefficient[[i-1]])
i <- i + 1
}
resData$residuals = resData$predicted - resData[,1]
plot(resData[,1], resData$predicted)
#return(resData)
}
getResiduals(data, c("cowcode", "year"), t)
getResiduals <- function(data, idvars, regression) {
resData <- regression$reg$model
nvars <- dim(resData)[2] + 1
resData$predicted <- regression$reg$coefficient[[1]]
i <- 2
while (i < nvars) {
resData$predicted <- resData$predicted + (resData[,i] * regression$reg$coefficient[[i]])
i <- i + 1
}
resData$residuals = resData$predicted - resData[,1]
plot(resData[,1], resData$predicted)
#return(resData)
}
getResiduals(data, c("cowcode", "year"), t)
getResiduals(data, c("cowcode", "year"), t)
getResiduals <- function(data, idvars, regression) {
resData <- regression$reg$model
nvars <- dim(resData)[2] + 1
resData$predicted <- regression$reg$coefficient[[1]]
i <- 2
while (i < nvars) {
resData$predicted <- resData$predicted + (resData[,i] * regression$reg$coefficient[[i]])
i <- i + 1
}
resData$residuals = resData$predicted - resData[,1]
#plot(resData[,1], resData$predicted)
plot(resData$growth, resData$predicted)
#return(resData)
}
getResiduals(data, c("cowcode", "year"), t)
getResiduals <- function(data, idvars, regression) {
resData <- regression$reg$model
nvars <- dim(resData)[2] + 1
resData$predicted <- regression$reg$coefficient[[1]]
i <- 2
while (i < nvars) {
resData$predicted <- resData$predicted + (resData[,i] * regression$reg$coefficient[[i]])
i <- i + 1
}
resData$residuals = resData$predicted - resData[,1]
#plot(resData[,1], resData$predicted)
plot(resData$growth, resData$residuals)
#return(resData)
}
getResiduals(data, c("cowcode", "year"), t)
getResiduals <- function(data, idvars, regression) {
resData <- regression$reg$model
nvars <- dim(resData)[2] + 1
resData$predicted <- regression$reg$coefficient[[1]]
i <- 2
while (i < nvars) {
resData$predicted <- resData$predicted + (resData[,i] * regression$reg$coefficient[[i]])
i <- i + 1
}
resData$residuals = resData$predicted - resData[,1]
#plot(resData[,1], resData$predicted)
plot(resData$missalignment, resData$residuals)
#return(resData)
}
getResiduals(data, c("cowcode", "year"), t)
plot(resData$predicted, resData$residuals)
getResiduals <- function(data, idvars, regression) {
resData <- regression$reg$model
nvars <- dim(resData)[2] + 1
resData$predicted <- regression$reg$coefficient[[1]]
i <- 2
while (i < nvars) {
resData$predicted <- resData$predicted + (resData[,i] * regression$reg$coefficient[[i]])
i <- i + 1
}
resData$residuals = resData$predicted - resData[,1]
#plot(resData[,1], resData$predicted)
plot(resData$predicted, resData$residuals)
#return(resData)
}
getResiduals(data, c("cowcode", "year"), t)
library(Hmisc)   #data exploration
library(caret)   #machine learning
library(rattle)  #tree diagram
training <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
testing <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
head(training)
describe(training$amplitude_yaw_forearm)
training <- training[,8:160] #drop variables at front
library(Hmisc)   #data exploration
library(caret)   #machine learning
library(rattle)  #tree diagram
training <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
testing <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
training <- training[,8:160] #drop variables at front
modelFit <- train(classe ~ ., method="rpart", data=training)
?preProcess
predictors <- training[,1:152] #predictor variables for preprocessing
preProc <- preProcess(predictors, method = "pca")
tapply(training[1:10], describe())
?tapply
sapply(training[1:10], describe())
sapply(training, describe())
sapply(training[,1:10], describe())
sapply(training[,1:10], mean())
myfunc <- function(x){
describe(x)
}
sapply(training[,1:10], myfunc())
sapply(training[,1:10], myfunc())
myfunc <- function(x){
x
}
sapply(training[,1:10], myfunc())
?sapply
?apply
apply(training[,1:10], 2, describe())
training(col.names)
training$col.names
apply(training, 2, describe())
apply(training, 2, x)
apply(training, 2, describe)
apply(training[1:10], 2, describe)
describe(training$$kurtosis_yaw_belt)
describe(training$kurtosis_yaw_belt)
apply(training[,1:10], 2, describe)
describe(training$skewness_yaw_belt)
predictors <- apply(predictors, 2, as.numeric)
dim(predictors)
preProc <- preProcess(predictors, method = "pca")
predictors <- training[,1:152] #predictor variables for preprocessing
predictors <- predictors[, - c("amplitude_yaw_belt", "amplitude_yaw_dumbbell", "amplitude_yaw_forearm")]
predictors <- predictors[- c("amplitude_yaw_belt", "amplitude_yaw_dumbbell", "amplitude_yaw_forearm")]
predictors <- predictors[, - which[names(predictors) %in% c("amplitude_yaw_belt", "amplitude_yaw_dumbbell", "amplitude_yaw_forearm")]
predictors <- predictors[, - which(names(predictors) %in% c("amplitude_yaw_belt", "amplitude_yaw_dumbbell", "amplitude_yaw_forearm"))]
predictors <- apply(predictors, 2, as.numeric)
preProc <- preProcess(predictors, method = "pca")
?preProcess
predictors <- as.data.frame(predictors)
preProc <- preProcess(predictors, method = "pca")
debug(preProcess)
preProc <- preProcess(predictors, method = "pca")
scaleValue
predictors <- training[,1:152] #predictor variables for preprocessing
predictors <- predictors[, - which(names(predictors) %in% c("amplitude_yaw_belt", "amplitude_yaw_dumbbell", "amplitude_yaw_forearm",
"kurtosis_yaw_forearm", "skewness_yaw_forearm", "kurtosis_yaw_belt",
"skewness_yaw_belt","kurtosis_yaw_dumbbell","skewness_yaw_dumbbell"))]
predictors <- apply(predictors, 2, as.numeric)
predictors <- as.data.frame(predictors)
preProc <- preProcess(predictors, method = "pca")
undebug(preProcess)
preProc <- preProcess(predictors, method = "pca")
preProc$rotation
ppPredictors <- preProc$rotation
View(ppPredictors)
View(ppPredictors)
ppPredictors <- predict(preProc, predictors)
View(ppPredictors)
?predict
?preproc
?preproc
?preProcess
?preProcess?predict
?preProcess.predict
preProc <- preProcess(predictors, method = "pca", na.remove = FALSE)
predictors <- training[,1:152] #predictor variables for preprocessing
predictors <- predictors[, - which(names(predictors) %in% c("amplitude_yaw_belt", "amplitude_yaw_dumbbell", "amplitude_yaw_forearm",
"kurtosis_yaw_forearm", "skewness_yaw_forearm", "kurtosis_yaw_belt",
"skewness_yaw_belt","kurtosis_yaw_dumbbell","skewness_yaw_dumbbell"))]
predictors <- apply(predictors, 2, as.numeric)
predictors <- as.data.frame(predictors)
preProc <- preProcess(predictors, method = "pca", na.remove = FALSE)
debug(predict)
undebug(predict)
debug(preProcess)
preProc <- preProcess(predictors, method = "pca", na.remove = FALSE)
scaleValue
myScales <- scaleValue
myScales <<- scaleValue
predictors <- training[,1:152] #predictor variables for preprocessing
predictors <- apply(predictors, 2, as.numeric)
predictors <- as.data.frame(predictors)
preProc <- preProcess(predictors, method = "pca", na.remove = FALSE)
myScales <<- scaleValue
modelFit <- train(classe ~ ., method="rpart", data=training)
print(modelFit$finalModel)
fancyRpartPlot(modelFit$finalModel)
?train
modelFit <- train(classe ~ ., method="rpart", data=training. tuneLength = 10)
modelFit <- train(classe ~ ., method="rpart", data=training, tuneLength = 10)
print(modelFit$finalModel)
fancyRpartPlot(modelFit$finalModel)
modelFit2 <- train(classe ~ ., method="rf", data=training, tuneLength = 10)
?count
missings <- apply(training, 2, sum(is.na))
missings <- apply(training, 2, sum(is.na()))
mySum <- function(x){
sum(is.na(x))
}
missings <- apply(training, 2, mySum))
missings <- apply(training, 2, mySum)
missings
predictors <- predictors[, -which(mySum > 19000)]
predictors <- predictors[, -which(mySum() > 19000)]
missings <- apply(training, 2, mySum)
missings
mySum <- function(x){
t <- sum(is.na(x))
return(t > 19000)
}
missings <- apply(training, 2, mySum)
missings
predictors <- predictors[, -which(mySum)]
names(missings)
names(missings[TRUE])
names(missings[which(missings == TRUE)])
predictors <- training[,1:152] #predictor variables for preprocessing
predictors <- predictors[, -which(names(predictors) %in% names(missings[which(missings == TRUE)])]
names(missings[which(missings == TRUE)])
class(names(missings[which(missings == TRUE)]))
?names
predictors <- predictors[, -which(names(predictors) %in% names(missings[which(missings == TRUE)])]
predictors <- predictors[, -which(names(predictors) %in% names(missings[which(missings == TRUE)]))]
missings <- apply(training, 2, function(x) sum(is.na(x)) > 19000)
missings
preProc <- preProcess(predictors, method = "pca", na.remove = FALSE)
undepug(preProcess)
undebug(preProcess)
preProc <- preProcess(predictors, method = "pca", na.remove = FALSE)
predictors <- apply(predictors, 2, as.numeric)
predictors <- as.data.frame(predictors)
preProc <- preProcess(predictors, method = "pca", na.remove = FALSE)
predictors <- training[,1:152] #predictor variables for preprocessing
missings <- apply(training, 2, function(x) sum(is.na(x)) > 19000) #identify variables with many missing values
predictors <- predictors[, -which(names(predictors) %in% names(missings[which(missings == TRUE)]))]
preductors$classe <- training$classe
predictors$classe <- training$classe
modelFit2 <- train(classe ~ ., method="rpart", data=predictors, tuneLength = 10)
modelFit2 <- train(classe ~ ., method="rpart", data=predictors)
library(Hmisc)   #data exploration
library(caret)   #machine learning
library(rattle)  #tree diagram
training <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
testing <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
trainingStore <- training
training <- training[,8:160] #drop variables at front
#drop empty variables
predictors <- training[,1:152] #predictor variables for preprocessing
missings <- apply(training, 2, function(x) sum(is.na(x)) > 19000) #identify variables with many missing values
predictors <- predictors[, -which(names(predictors) %in% names(missings[which(missings == TRUE)]))]
predictors <- predictors[, - which(names(predictors) %in% c("amplitude_yaw_belt", "amplitude_yaw_dumbbell", "amplitude_yaw_forearm",
"kurtosis_yaw_forearm", "skewness_yaw_forearm", "kurtosis_yaw_belt",
"skewness_yaw_belt","kurtosis_yaw_dumbbell","skewness_yaw_dumbbell"))]
predictors <- apply(predictors, 2, as.numeric)
predictors <- as.data.frame(predictors)
preProc <- preProcess(predictors, method = "pca", na.remove = FALSE)
modelFit2 <- train(classe ~ ., method="rpart", data=predictors)
predictors <- training[,1:152] #predictor variables for preprocessing
missings <- apply(training, 2, function(x) sum(is.na(x)) > 19000) #identify variables with many missing values
predictors <- predictors[, -which(names(predictors) %in% names(missings[which(missings == TRUE)]))]
predictors$classe <- training$classe
modelFit2 <- train(classe ~ ., method="rpart", data=predictors)
getMethod(lm)
showMethods(lm)
showMethods(preProces)
showMethods(preProcess)
getMethod(preProcess)
getClas(preProcess)
getClass(preProcess)
library(Hmisc)   #data exploration
library(caret)   #machine learning
library(rattle)  #tree diagram
training <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
testing <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
trainingStore <- training
```
save.image("C:/Users/Jason/Box Sync/Current Projects/Coursera/machine.RData")
training <- training[,8:160] #drop variables at front
predictors <- training[,1:152] #predictor variables for preprocessing
missings <- apply(training, 2, function(x) sum(is.na(x)) > 19000) #identify variables with many missing values
predictors <- predictors[, -which(names(predictors) %in% names(missings[which(missings == TRUE)]))]
predictors <- apply(predictors, 2, as.numeric)
predictors <- as.data.frame(predictors)
apply(training, 2, function(x) sum(is.na(x)))
apply(predictors, 2, function(x) sum(is.na(x)))
predictors <- training[,1:152] #predictor variables for preprocessing
predictors <- predictors[,-which(function(x) sum(is.na(x)) > 1900)]
predictors <- predictors[,-which(apply(,2,function(x) sum(is.na(x)) > 1900)]
missings
sum(is.na(predictors$min_yaw_forearm))
sum(is.na(training$min_yaw_forearm))
apply(predictors, 2, function(x) sum(is.na(x)))
missings
predictors <- predictors[,missings]
apply(predictors, 2, function(x) sum(is.na(x)))
predictors <- training[,1:152] #predictor variables for preprocessing
missings <- apply(training, 2, function(x) sum(is.na(x)) < 19000) #identify variables with many missing values
predictors <- predictors[,missings]
predictors <- training[,1:152] #predictor variables for preprocessing
predictors <- predictors[,-which(apply(,2,function(x) sum(is.na(x)) < 19000)]
missings <- apply(predictors, 2, function(x) sum(is.na(x)) < 19000) #identify variables with many missing values
predictors <- predictors[,missings]
apply(predictors, 2, function(x) sum(is.na(x)))
predictors <- apply(predictors, 2, as.numeric)
predictors <- as.data.frame(predictors)
predictors$classe <- training$classe
preProc <- preProcess(predictors, method = "pca", na.remove = FALSE)
predictors <- training[,1:152] #predictor variables for preprocessing
predictors <- predictors[,-which(apply(,2,function(x) sum(is.na(x)) < 19000)]
missings <- apply(predictors, 2, function(x) sum(is.na(x)) < 19000) #identify variables with many missing values
predictors <- predictors[,missings]
predictors <- apply(predictors, 2, as.numeric)
predictors <- as.data.frame(predictors)
preProc <- preProcess(predictors, method = "pca", na.remove = FALSE)
preProc <- preProcess(predictors, method = "pca")
predictors <- training[,1:152] #predictor variables for preprocessing
predictors <- predictors[,-which(apply(,2,function(x) sum(is.na(x)) < 19000)]
variances <- apply(predictors, 2, function(x) var(x))
variances
predictors <- training[,1:152] #predictor variables for preprocessing
predictors <- predictors[,-which(apply(,2,function(x) sum(is.na(x)) < 19000)]
predictors <- training[,1:152] #predictor variables for preprocessing
nonConstant <- apply(predictors, 2, function(x) !is.na(var(x)))
predictors <- predictors[,nonConstant]
nonMissing <- apply(predictors, 2, function(x) sum(is.na(x)) < 19000)
predictors <- predictors[,nonMissing]
predictors <- apply(predictors, 2, as.numeric)
predictors <- as.data.frame(predictors)
preProc <- preProcess(predictors, method = "pca")
ppPredictors <- predict(preProc, predictors)
View(ppPredictors)
modelFit2 <- train(classe ~ ., method="rpart", data=ppPredictors)
ppPredictors$classe <- training$classe
modelFit2 <- train(classe ~ ., method="rpart", data=ppPredictors)
print(modelFit$finalModel)
print(modelFit2$finalModel)
fancyRpartPlot(modelFit2$finalModel)
modelFit2 <- train(classe ~ ., method="rf", data=ppPredictors)
?preprocess
?preProcess
preProc <- preProcess(predictors, method = "pca", threshold = .9)
ppPredictors <- predict(preProc, predictors)
preProc <- preProcess(predictors, method = "pca", threshold = .8)
ppPredictors <- predict(preProc, predictors)
preProc <- preProcess(predictors, method = "pca", threshold = .5)
ppPredictors <- predict(preProc, predictors)
preProc <- preProcess(predictors, method = "pca", threshold = .1)
ppPredictors <- predict(preProc, predictors)
preProc <- preProcess(predictors, method = "pca", thresh = .1)
ppPredictors <- predict(preProc, predictors)
preProc <- preProcess(predictors, method = "pca", thresh = .99)
ppPredictors <- predict(preProc, predictors)
preProc <- preProcess(predictors, method = "pca", thresh = .95)
ppPredictors <- predict(preProc, predictors)
preProc$rotation
modelFit2 <- train(classe ~ ., method="rf", data=ppPredictors)
ppPredictors <- predict(preProc, predictors)
ppPredictors$classe <- training$classe
modelFit2 <- train(classe ~ ., method="rf", data=ppPredictors)
?trainControl
?train
trainSettings <- traincontrol(method = "cv", number = 10)
trainSettings <- trainControl(method = "cv", number = 10)
modelFit2 <- train(classe ~ ., method="rf", data=ppPredictors, trControl = trainSettings)
modelFit2 <- train(classe ~ ., method="rpart", data=ppPredictors, trControl = trainSettings)
modelFit2
modelFit2 <- train(classe ~ ., method="rpart", data=ppPredictors, trControl = trainSettings, tuneLength = 5)
modelFit2
print(modelFit2$finalModel)
fancyRpartPlot(modelFit2$finalModel)
trainSettings <- trainControl(method = "repeatedcv", number = 10)
modelFit2 <- train(classe ~ ., method="rpart", data=predictors, trControl = trainSettings, tuneLength = 5)
predictors$classe <- training$classe
modelFit2 <- train(classe ~ ., method="rpart", data=predictors, trControl = trainSettings, tuneLength = 5)
fancyRpartPlot(modelFit2$finalModel)
trainSettings <- trainControl(method = "repeatedcv", number = 25)
modelFit2 <- train(classe ~ ., method="rpart", data=predictors, trControl = trainSettings, tuneLength = 5)
fancyRpartPlot(modelFit2$finalModel)
modelFit2 <- train(classe ~ ., method="rf", data=predictors, trControl = trainSettings, tuneLength = 5)
set.seed(254684)
modelFit2 <- train(classe ~ ., method="rf", data=predictors, trControl = trainSettings, tuneLength = 5)
modelFit2 <- train(classe ~ ., method="rf", data=predictors, tuneLength = 5)
library(Hmisc)   #data exploration
library(caret)   #machine learning
library(rattle)  #tree diagram
training <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
testing <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
trainingStore <- training
set.seed(254684)
inErrorEstSample <- createDataPartition(y=training$classe, p=.05, list=FALSE)
errorEstSample <- training[inErrorEstSample]
training <- training[-inErrorEstSample]
inMidTest <- createDataPartition(y=training$classe, p=.15, list=FALSE)
midTest <- training[inMidTest]
training <- training[-inMidTest]
training <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
trainingStore <- training
set.seed(254684)
inErrorEstSample <- createDataPartition(y=training$classe, p=.05, list=FALSE)
errorEstSample <- training[inErrorEstSample]
training <- training[-inErrorEstSample]
inMidTest <- createDataPartition(y=training$classe, p=.15, list=FALSE)
midTest <- training[inMidTest]
training <- training[-inMidTest]
training <- trainingStore
inErrorEstSample <- createDataPartition(y=training$classe, p=.05, list=FALSE)
errorEstSample <- training[inErrorEstSample]
training <- training[-inErrorEstSample]
training <- trainingStore
inErrorEstSample <- createDataPartition(y=training$classe, p=.05, list=FALSE)
errorEstSample <- training[inErrorEstSample,]
training <- training[-inErrorEstSample,]
inMidTest <- createDataPartition(y=training$classe, p=.15, list=FALSE)
midTest <- training[inMidTest]
training <- training[-inMidTest]
training <- trainingStore
inErrorEstSample <- createDataPartition(y=training$classe, p=.05, list=FALSE)
errorEstSample <- training[inErrorEstSample,]
training <- training[-inErrorEstSample,]
inMidTest <- createDataPartition(y=training$classe, p=.15, list=FALSE)
midTest <- training[inMidTest,]
training <- training[-inMidTest,]
training <- training[,8:160] #drop variables at front
predictors <- training[,1:152] #predictor variables for preprocessing
nonConstant <- apply(predictors, 2, function(x) !is.na(var(x)))
predictors <- predictors[,nonConstant]
nonMissing <- apply(predictors, 2, function(x) sum(is.na(x)) < 19000)
predictors <- predictors[,nonMissing]
predictors$classe <- training$classe
trainSettings <- trainControl(method = "boot632", number = 25)
modelFit <- train(classe ~ ., method="rpart", data=predictors, trControl = trainSettings, tuneLength = 5)
fancyRpartPlot(modelFit$finalModel)
?train
trainSettings <- trainControl(method = "gbm", number = 25)
modelFit <- train(classe ~ ., method="rpart", data=predictors, trControl = trainSettings, tuneLength = 5)
trainSettings <- trainControl(method = "boot632", number = 25)
modelFit <- train(classe ~ ., method="rpart", data=predictors, trControl = trainSettings, tuneLength = 5)
fancyRpartPlot(modelFit$finalModel)
modelFit <- train(classe ~ ., method="rpart", data=predictors, trControl = trainSettings, tuneLength = 6)
fancyRpartPlot(modelFit$finalModel)
print(modelFit$finalModel)
modelFit
modelGBM5 <- train(classe ~ ., method="gbm", data=predictors, tuneLength = 5)
gbmControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
repeats = 10)
modelGBM5 <- train(classe ~ ., method="gbm", data=predictors, tuneLength = 5, verbose = TRUE,
trControl = gbmControl)
modelRF5 - train(classe ~ ., method="rf", data=predictors, tuneLength = 5, verbose=TRUE)
modelRF5 <- train(classe ~ ., method="rf", data=predictors, tuneLength = 5, verbose=TRUE)
save.image("C:/Users/Jason/Box Sync/Current Projects/Coursera/machine.RData")
setwd("~/GitHub/practicalMachineLearningProject")
